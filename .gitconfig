[user]
  name = Sergio Ruiz
  email = serginator@gmail.com

[core]
  editor = vim

[merge]
  tool = diff

[alias]
  add = add -u
  co = checkout
  st = status
  ci = commit
  br = branch
  root = !pwd
  visual = !gitk &i
  uncommit = reset --soft HEAD^
  unstage = reset HEAD --
  sh = stash
  unsh = stash pop
  lg = "log --graph --pretty=format:'%Cred%h%Creset - %C(bold blue)<%an>%Creset %C(yellow)%d%Creset %s %Cgreen(%cr)' --abbrev-commit --date=relative"
  logfile = "! f() { git log --follow -p $1; }; f"
  prunebranches = remote prune origin ; Removes local branches that dont't exist remotely
  back = checkout -
  update = "! git pull origin `git rev-parse --abbrev-ref HEAD`"
  commits-since = "! f() { SINCE=\"yesterday\"; test $# -ne 0 && SINCE=$@; echo \"... commits since $SINCE\"; git log --pretty='%C(bold blue)<%an>%Creset - %s' --after=\"@{$SINCE}\"; }; f"
  alias = "! f() { case $# in 0) git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /' | sort |  awk -F= '{printf \"\\033[1;34m\" $1 \"\\033[0m \" \"=\";$1=\"\"; print $0}' ;; 1) git alias | grep -e \"$1\" ;; *) git config --global \"alias.$1\" \"$2\" ;; esac; }; f"
  undo = "! f() { back=\"^\"; case \"$1\" in -h|--hard) test $2 -gt 1 > /dev/null 2>&1 && back=\"~$2\" git reset --hard HEAD$back && exit 0;;; -s|--soft) test $2 -gt 1 > /dev/null 2>&1 && back=\"~$2\";;*) test $1 -gt 1 > /dev/null 2>&1 && back=\"~$1\";;esac; git reset --soft HEAD$back; git reset }; f"
  local-commits = "! f() { ref=$(git symbolic-ref HEAD); branch=${ref#refs/heads/}; git log --pretty='%C(bold blue)<%an>%Creset - %s' origin/${branch}..${branch} $*; }; f"
  track = "! git for-each-ref --format=\"%(refname:short) <- %(upstream:short)\" refs/heads | awk -F \"<-\" '{ printf $1 \"\\033[1;34m\" \"<- \"; if ($2 == \" \") printf \"\\033[1;31m(No tracking branch)\"; else printf $2; print \"\\033[0m\"}'"
  revertacommit = reset --hard HEAD~1
  desc = "! f() { git stash --quiet --include-untracked;BRANCH=\"develop\";if [ -n \"$1\" ]; then BRANCH=\"$1\"; fi;git checkout \"$BRANCH\" --quiet;git pull --quiet origin \"$BRANCH\";git describe;git checkout - --quiet;git stash pop --quiet; }; f"

  ; PDI FLOW
  dev = "! git checkout develop; git pull origin develop"
  feature = "! f() { git dev; git co -b feature/$1; git push origin feature/$1; }; f"
  bug = "! f() { git dev; git co -b bug/$1; git push origin bug/$1; }; f"
  task = "! f() { git dev; git co -b task/$1; git push origin task/$1; }; f"
  subtask = "! f() { git update; git co -b subtask/$1; git push origin subtask/$1; }; f"
  subbug = "! f() { git update; git co -b subbug/$1; git push origin subbug/$1; }; f"
  hardening = "! f() { git dev; git co -b hardening/$1; git push origin hardening/$1; }; f"
  delbranch = "! f() { git dev; git br -d $1; git push origin :$1; }; f"
  renamebranch = "! f() { git branch -m $1 $2; git push origin :$1; git push --set-upstream origin $2; }; f"
  mergedev = "! git dev; git checkout -; git update; git merge develop"
  tagr3 = "! f() { git dev; git tag -a -m 'Tag 3.0 sprint $1' 3.0.0/S$1; git push --tags; }; f"

; URL shortcuts by @tdecs
[url "http://github.com/"]
  insteadOf = "gh:"

[url "git@github.com:"]
  insteadOf = "https://github.com/"
  insteadOf = "http://github.com/"
  insteadOf = "gh:"

[url "git@github.com:serginator/"]
  insteadOf = "gs:"

[url "http://github.com/serginator/"]
  insteadOf = "gs:"

[push]
  default = current

[color]
  ui = true
